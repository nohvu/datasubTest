import Head from 'next/head';

import { Formik, Form, Field } from 'formik';

import { Box } from '@mui/material';
import { MyBox } from '../styles/MyBox';
import { MyInput } from '../styles/MyInput';
import { MyButton } from '../styles/MyButton';
import { validationSchema } from '../validation/ValidationSchema';
import { formatExpirationDate } from './api/formatDate.js';
import { formatNumber } from './api/formatNumber.js';
import { fetchPayment } from './api/fetchPayment.js';

import styles from '../styles/Home.module.scss';

const initialValues = {
  cardNumber: '',
  expirationDate: '',
  cvv: '',
  amount: '',
};

export default function Home() {
  const onSubmit = (_, props) => {
    props.resetForm();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Datasub</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Formik
          initialValues={initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}>
          {(props) => (
            <Form>
              <MyBox sx={{ zIndex: '1', position: 'relative', top: '250px', right: '200px' }}>
                <Field
                  id="cardNumber"
                  name="cardNumber"
                  label="Card Number"
                  placeholder="5500 5500 5500 5500"
                  variant="filled"
                  onChange={(e) => formatNumber(e.target.value, props)}
                  inputProps={{ maxLength: 19 }}
                  as={MyInput}
                  helperText={props.touched.cardNumber ? props.errors.cardNumber : ''}
                  error={props.touched.cardNumber && Boolean(props.errors.cardNumber)}
                />
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Field
                    as={MyInput}
                    sx={{ width: '200px' }}
                    inputProps={{ maxLength: 7 }}
                    id="expirationDate"
                    name="expirationDate"
                    label="Expiration Date"
                    placeholder="MM/YYYY"
                    variant="filled"
                    onChange={(e) => formatExpirationDate(e.target.value, props)}
                    helperText={props.touched.expirationDate ? props.errors.expirationDate : ''}
                    error={props.touched.expirationDate && Boolean(props.errors.expirationDate)}
                  />

                  <Field
                    type="number"
                    as={MyInput}
                    sx={{ width: '200px' }}
                    helperText={props.touched.amount ? props.errors.amount : ''}
                    error={props.touched.amount && Boolean(props.errors.amount)}
                    id="amount"
                    name="amount"
                    label="Amount"
                    placeholder="0 $"
                    variant="filled"
                  />
                </Box>
                <MyButton
                  disabled={!(props.isValid && props.dirty)}
                  type="submit"
                  variant="contained"
                  onClick={() => fetchPayment(props)}>
                  <span>Pay</span>
                </MyButton>
              </MyBox>
              <MyBox
                sx={{
                  justifyContent: 'center',
                  alignItems: 'flex-end',
                  zIndex: '0',
                }}>
                <Field
                  as={MyInput}
                  sx={{ width: '100px' }}
                  id="cvv"
                  label="CVV"
                  name="cvv"
                  placeholder="***"
                  variant="filled"
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 3);
                  }}
                  helperText={props.touched.cvv ? props.errors.cvv : ''}
                  error={props.touched.cvv && Boolean(props.errors.cvv)}
                />
              </MyBox>
            </Form>
          )}
        </Formik>
      </main>
    </div>
  );
}
